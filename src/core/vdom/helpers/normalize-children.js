/* @flow */

import VNode, { createTextVNode } from "core/vdom/vnode";
import { isFalse, isTrue, isDef, isUndef, isPrimitive } from "shared/util";

// !   模板编译器试图通过在编译时静态分析模板来最小化规范化的需要。
// !   对于纯 HTML 标记，可以完全跳过规范化，因为生成的渲染函数保证返回 Array<VNode>。
// !   有两种情况需要额外的规范化：
/**
 * @描述 当子组件包含组件时 - 因为功能组件可能返回一个数组而不是单个根。在这种情况下，只需要一个简单的规范化——如果有任何孩子是一个数组，
 *      我们用 Array.prototype.concat 将整个事物展平。它保证只有 1 级深度，因为功能组件已经规范了他们自己的孩子。
 * @作者 HY
 * @时间 2021-06-27 17:21
 */
export function simpleNormalizeChildren(children: any) {
  for (let i = 0; i < children.length; i++) {
    if (Array.isArray(children[i])) {
      return Array.prototype.concat.apply([], children);
    }
  }
  return children;
}

/**
 * @描述 当子元素包含总是生成嵌套数组的构造时，例如<template>、<slot>、v-for 或 当子项由用户提供手写渲染函数 JSX 时。
 *      在这种情况下，需要完全规范化以迎合所有可能类型的子值。
 * @作者 HY
 * @时间 2021-06-27 17:19
 */
export function normalizeChildren(children: any): ?Array<VNode> {
  return isPrimitive(children)
    ? [createTextVNode(children)]
    : Array.isArray(children)
    ? normalizeArrayChildren(children)
    : undefined;
}

function normalizeArrayChildren(
  children: any,
  nestedIndex?: string
): Array<VNode> {
  const res = [];
  let i, c, lastIndex, last;

  for (i = 0; i < children.length; i++) {
    c = children[i];
    if (isUndef(c) || typeof c === "boolean") continue;
    lastIndex = res.length - 1;
    last = res[lastIndex];

    // * 当前children是个数组
    if (Array.isArray(c)) {
      if (c.length > 0) {
        // * 递归调用normalizeArrayChildren,合并文本节点，添加到res中
        c = normalizeArrayChildren(c, `${nestedIndex || ""}_${i}`);
        if (isTextNode(c[0]) && isTextNode(last)) {
          res[lastIndex] = createTextVNode(last.text + (c[0]: any).text);
          c.shift();
        }
        res.push.apply(res, c);
      }
    }
    // * 当前children是个对象
    else if (isPrimitive(c)) {
      if (isTextNode(last)) {
        // * 合并相邻的文本节点:这对于 SSR hydration 是必要的，因为文本节点在呈现为 HTML 字符串时本质上是合并的
        res[lastIndex] = createTextVNode(last.text + c);
      } else if (c !== "") {
        // * 将VNode转换为原始的文本节点
        res.push(createTextVNode(c));
      }
    }
    // * 当前children是个一开始和末尾是文本节点
    else {
      // * 合并节点
      if (isTextNode(c) && isTextNode(last)) {
        res[lastIndex] = createTextVNode(last.text + c.text);
      } else {
        // default key for nested array children (likely generated by v-for)
        if (
          isTrue(children._isVList) &&
          isDef(c.tag) &&
          isUndef(c.key) &&
          isDef(nestedIndex)
        ) {
          c.key = `__vlist${nestedIndex}_${i}__`;
        }
        res.push(c);
      }
    }
  }
  return res;
}

function isTextNode(node): boolean {
  return isDef(node) && isDef(node.text) && isFalse(node.isComment);
}
